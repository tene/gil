# $Id$

=begin overview

This is the grammar for gil written as a sequence of Perl 6 rules.

=end overview

grammar gil::Grammar is PCT::Grammar;

rule TOP {
    <statement>*
    [ $ || <panic: Syntax error> ]
    {*}
}

##  this <ws> rule treats # as "comment to eol"
##  you may want to replace it with something appropriate
token ws {
    <!ww>
    [ '#' \N* \n? | \s+ ]*
}

token statement {
    [
    | <EXPR>  {*}                          #= EXPR
    ]
    ';'
}

token term {
    | <funcall>  {*}                      #= funcall
    | <variable> {*}                      #= variable
    | <value>    {*}                      #= value
}


rule funcall {
    $<fname>=<ident>'(' <EXPR> [',' <EXPR>]* ')' {*}
}

token value {
    | <integer> {*}                              #= integer
    | <quote> {*}                                #= quote
}

rule variable {
    | 'my' $<name>=<ident> {*}         #= declaration
    | $<name>=<ident> {*}              #= not_declaration
}

token integer { \d+ {*} }

token quote {
    [ \' <string_literal: '> \' | \" <string_literal: "> \" ]
    {*}
}


rule EXPR is optable { ... }

proto 'infix:=' is precedence(1) is pasttype('bind') is lvalue(1) { ... }
proto 'infix:+' is looser('infix:=') is pirop('n_add') { ... }
proto 'infix:-' is equiv('infix:+') is pirop('n_sub') { ... }
proto 'infix:*' is looser('infix:+') is pirop('n_mul') { ... }
proto 'infix:/' is looser('infix:+') is pirop('n_div') { ... }
proto 'term:' is tighter('infix:=') is parsed(&term) { ... }
